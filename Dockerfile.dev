FROM python:3.11.8-slim-bullseye

# Use Docker BuildKit for better caching and faster builds
ARG DOCKER_BUILDKIT=1
ARG BUILDKIT_INLINE_CACHE=1
# Enable BuildKit for Docker-Compose
ARG COMPOSE_DOCKER_CLI_BUILD=1

ENV PYTHONUNBUFFERED 1
ENV PYTHONDONTWRITEBYTECODE 1

# Configure apt and install packages
# I had to add --insecure since curl didn't work...
RUN apt-get update && \
    apt-get install -y --no-install-recommends apt-utils dialog curl iputils-ping unzip dos2unix gcc 2>&1 && \
    # Install AWS CLI
    curl --insecure "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    ./aws/install && \
    # Verify git, process tools, lsb-release (common in install instructions for CLIs) installed
    apt-get install -y --no-install-recommends sudo git redis-server libpq-dev sass \
    procps iproute2 lsb-release gnupg apt-transport-https \
    g++ protobuf-compiler libprotobuf-dev && \
    # Clean up
    apt-get autoremove -y && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /workspace

# Install Poetry with the root user
# Ensure pip is the latest version
ENV POETRY_HOME=/usr/local
RUN pip install --upgrade pip && \
    # Install Poetry
    # curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python - && \
    curl -sSL https://install.python-poetry.org | POETRY_HOME=/opt/poetry python && \
    cd /usr/local/bin && \
    ln -s /opt/poetry/bin/poetry && \
    poetry config virtualenvs.create false && \
    # Clean up
    apt-get autoremove -y && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

# Install NodeJS, yarn, and NPM with the root user
# ENV PATH="/home/user/workspace/bin:$PATH"
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash -  && \
    # Install nodejs and yarn
    apt-get update && \
    apt-get install -yqqf nodejs && \
    # Install the latest version of npm (10)
    npm install --global npm@^10 && \
    npm install --global yarn && \
    # Clean up
    apt-get autoremove -y && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

# Copy my preferred .bashrc to /root/ so that it's automatically "sourced" when the container starts
COPY .bashrc /root/

# COPY dash_signature dash_signature
# RUN pip install build
# RUN python -m build --sdist dash_signature -o dash_signature/dist

# COPY pyproject.toml poetry.lock ./
COPY . .
RUN \
    # in-project .venv makes it very slow since it's sharing files with Windows/WSL...
    # poetry config virtualenvs.in-project true
    # These settings get put into the ~/.config./pyconfig/config.toml file
    # poetry add /workspace/dash_signature && \
    # poetry lock && \
    poetry config virtualenvs.create false && \
    # poetry config repositories.ijack_private https://pypi.myijack.com && \
    # The following username/password setup doesn't seem to work for some reason...
    # poetry config http-basic.ijack_private $PYPI_USERNAME_PRIVATE $PYPI_PASSWORD_PRIVATE
    echo "Running poetry install..." && \
    # poetry add --dev gateway-setup
    # echo ""
    poetry install --with dev --no-interaction --no-ansi

# COPY package.json package-lock.json ./
COPY package.json yarn.lock ./
RUN \
    echo "Running yarn install..." && \
    yarn install

ENV HOST 0.0.0.0

# # NODE stuff
# # ENV PATH="/home/user/workspace/node_modules/.bin:$PATH"
# ENV PATH="/workspace/node_modules/.bin:$PATH"
